stages:
  - build
  - sync

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  TAG: "$CI_COMMIT_TAG"
  IMAGE_NAME: "$HARBOR_URL/backup-portainer-github/backup-portainer-github"

services:
  - name: docker:dind
    alias: docker

before_script:
  - echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin $HARBOR_URL

build_and_push:
  stage: build
  image: docker:latest
  script:
    - echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin $HARBOR_URL
    - docker build -t $IMAGE_NAME:$TAG .
    - docker push $IMAGE_NAME:$TAG
    - docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:latest
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always

push_latest_tag_and_master_to_github:
  stage: sync
  image: alpine:latest
  before_script:
    - apk add --no-cache git
  script:
    # Config Git
    - git config --global user.email "ci@martinbranda.com"
    - git config --global user.name "GitLab CI"

    # Ajouter le remote GitHub avec token
    - git remote add github https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/lepikouze/backup-portainer-github-test.git

    # 🔧 Assure-toi d’avoir l’historique complet pour le push
    - git fetch --unshallow || true
    - git fetch --tags

    # Lister les 5 derniers tags dans les logs
    - echo "📦 Tags disponibles :"
    - git tag --sort=-creatordate | head -n 5

    # Détection du dernier tag
    - LAST_TAG=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | head -n 1)
    - echo "✅ Dernier tag détecté est le $LAST_TAG"

    # Vérifie l’existence du tag
    - |
      if git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
        echo "🚀 Pushing tag $LAST_TAG vers GitHub..."
        git push github "$LAST_TAG"

        echo "🚀 Pushing branche master vers GitHub..."
        git push github HEAD:master

        echo "🎉 Synchronisation terminée"
      else
        echo "❌ Tag $LAST_TAG introuvable !"
        exit 1
      fi
  when: manual
  allow_failure: false

