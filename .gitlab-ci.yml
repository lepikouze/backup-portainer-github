stages:
  - build
  - update

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  TAG: "$CI_COMMIT_TAG"
  IMAGE_NAME: "$HARBOR_URL/backup-portainer-github/backup-portainer-github"

# ---------------------------
# JOB 1 : BUILD + PUSH vers Harbor
# ---------------------------
build_and_push:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  script:
    - echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin $HARBOR_URL
    - docker build -t $IMAGE_NAME:$TAG .
    - docker push $IMAGE_NAME:$TAG
    - docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:latest

    # üìù R√©cup√©ration du tag pr√©c√©dent
    - git fetch --tags
    - PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v "$CI_COMMIT_TAG" | tail -n 1)
    - echo "üïì Dernier tag pr√©c√©dent est le $PREVIOUS_TAG"

    # üßæ G√©n√©ration du changelog simple (tri√©, sans doublons, pas de merges)
    - CHANGELOG=$(git log "$PREVIOUS_TAG..$CI_COMMIT_TAG" --pretty=format:"- %s" --no-merges | sort -u)
    - echo "$CHANGELOG"

    # üöÄ Cr√©ation de la release GitLab
    - |
      curl --request POST "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --header "Content-Type: application/json" \
        --data "{
          \"name\": \"$CI_COMMIT_TAG\",
          \"tag_name\": \"$CI_COMMIT_TAG\",
          \"description\": \"$CHANGELOG\"
        }"
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always


# ---------------------------
# JOB 2 : SYNC complet vers GitHub (manuel)
# - Push code (tag + master)
# - Push images Docker vers GHCR + Docker Hub
# ---------------------------
update_image_to_registries:
  stage: update
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  before_script:
    - apk add --no-cache git curl jq
  script:
    - git fetch --unshallow || true
    - git fetch --tags

    # üè∑Ô∏è R√©cup√©ration du dernier tag local
    - LAST_TAG=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | head -n 1)
    - echo "üü¢ Dernier tag local est le $LAST_TAG"


    # üîÅ Git remote + push
    - git config --global user.email "ci@martinbranda.com"
    - git config --global user.name "GitLab CI"
    - git remote add github https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/$GITHUB_USERNAME/backup-portainer-github.git

    - echo "üöÄ Pushing tag $LAST_TAG vers GitHub..."
    - git push github "$LAST_TAG" || echo "‚ö†Ô∏è Le tag existe d√©j√† sur GitHub."

    - echo "üöÄ Pushing master vers GitHub..."
    - git push github HEAD:refs/heads/master

    # Docker login vers les 3 registries
    - echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin $HARBOR_URL
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin

    # Pull depuis Harbor (source officielle)
    - docker pull $HARBOR_URL/backup-portainer-github/backup-portainer-github:$LAST_TAG

    # üîÅ Docker Hub
    - docker tag $HARBOR_URL/backup-portainer-github/backup-portainer-github:$LAST_TAG lepikouze/backup-portainer-github:$LAST_TAG
    - docker tag $HARBOR_URL/backup-portainer-github/backup-portainer-github:$LAST_TAG lepikouze/backup-portainer-github:latest
    - docker push lepikouze/backup-portainer-github:$LAST_TAG
    - docker push lepikouze/backup-portainer-github:latest

    # üîÅ GitHub Container Registry
    - docker tag $HARBOR_URL/backup-portainer-github/backup-portainer-github:$LAST_TAG ghcr.io/lepikouze/backup-portainer-github:$LAST_TAG
    - docker tag $HARBOR_URL/backup-portainer-github/backup-portainer-github:$LAST_TAG ghcr.io/lepikouze/backup-portainer-github:latest
    - docker push ghcr.io/lepikouze/backup-portainer-github:$LAST_TAG
    - docker push ghcr.io/lepikouze/backup-portainer-github:latest

    - echo "‚úÖ Push des images termin√©."
  when: manual
  allow_failure: false